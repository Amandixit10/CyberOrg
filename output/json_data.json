[
  {
    "description": "1) AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed JWEDecryptionFailed would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). [CVE-2021-29443]\n\n2) AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed JWEDecryptionFailed would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). [CVE-2021-29444]\n\n3) AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed JWEDecryptionFailed would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). [CVE-2021-29445]\n\n4) AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed JWEDecryptionFailed would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). [CVE-2021-29446]\n\nVendor Affected Components:\n[Vulnerabilities 1 - 3]\nNode.js Package: jose \u2264 3.11.3\n\n[Vulnerability 4]\nNode.js Package: jose 1.x \u2264 1.28.0\nNode.js Package: jose 2.x \u2264 2.0.4\nNode.js Package: jose 3.x \u2264 3.11.3"
  },
  {
    "description": "Node.js Package: ps-visitor is vulnerable to Arbitrary Command Injection. If attacker-controlled user input is given to the kill function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. [CVE-2021-23374]\n\nVendor Affected Components:\nNode.js Package: ps-visitor \u2264 0.0.2"
  },
  {
    "description": "Node.js Package: psnode is vulnerable to Arbitrary Command Injection. If attacker-controlled user input is given to the kill function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. [CVE-2021-23375]\n\nVendor Affected Components:\nNode.js Package: psnode \u2264 0.0.1"
  },
  {
    "description": "Portofino is an open source web development framework. Portofino did not properly verify the signature of JSON Web Tokens. This allows forging a valid JWT. [CVE-2021-29451]\n\nVendor Affected Components:\nPortofino 5.0.0 < 5.2.1"
  },
  {
    "description": "Node.js Package: ffmpegdotjs is vulnerable to Arbitrary Command Injection. If attacker-controlled user input is given to the trimvideo function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. [CVE-2021-23376]\n\nVendor Affected Components:\nNode.js Package: ffmpegdotjs \u2264 0.0.4"
  },
  {
    "description": "Node.js Package: onion-oled-js is vulnerable to Arbitrary Command Injection.  If attacker-controlled user input is given to the scroll function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. [CVE-2021-23377]\n\nVendor Affected Components:\nNode.js Package: onion-oled-js \u2264 0.0.2"
  }
]